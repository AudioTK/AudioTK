/**
 * \ file UniversalVariableDelayLineFilter.cpp
 */

#include <ATK/Delay/UniversalVariableDelayLineFilter.h>

#include <ATK/Core/InPointerFilter.h>
#include <ATK/Core/OutPointerFilter.h>
#include <ATK/Core/Utilities.h>

#include <ATK/Tools/CachedSinusGeneratorFilter.h>

#include <gtest/gtest.h>

#include <boost/math/constants/constants.hpp>

constexpr gsl::index PROCESSSIZE = (1024);

TEST(UniversalVariableDelayLineFilter, sinus_line16000_delaysinus_test)
{
  std::vector<double> data(PROCESSSIZE);
  for(gsl::index i = 0; i < PROCESSSIZE; ++i)
  {
    data[i] = std::sin(2 * boost::math::constants::pi<double>() * (i+1.)/48000 * 1000);
  }
  std::vector<double> datadelay(PROCESSSIZE);
  for(gsl::index i = 0; i < PROCESSSIZE; ++i)
  {
    datadelay[i] = 1 + i * .25f;
  }

  std::vector<double> ref{{ 0,0.0978947,0.210988,0.301743,0.33976,0.502864,0.552949,0.647301,0.668567,0.800696,0.826018,0.890491,0.899414,0.973763,0.974767,0.997753,0.993692,0.998315,0.97525,0.953083,0.936722,0.870857,0.827274,0.763312,0.737148,0.610816,0.553353,0.457332,0.425351,0.257784,0.19519,0.0817286,0.0487974,-0.134493,-0.192689,-0.306318,-0.335185,-0.506295,-0.551233,-0.64773,-0.668138,-0.801018,-0.825857,-0.890531,-0.899374,-0.973794,-0.974752,-0.997757,-0.993688,-0.998318,-0.975249,-0.953083,-0.936722,-0.870857,-0.827273,-0.763312,-0.737148,-0.610816,-0.553353,-0.457332,-0.425351,-0.257784,-0.19519,-0.0817285,-0.0487973,0.134493,0.19269,0.306318,0.335185,0.506295,0.551234,0.64773,0.668139,0.801018,0.825857,0.890531,0.899374,0.973794,0.974752,0.997757,0.993688,0.998318,0.975249,0.953083,0.936722,0.870857,0.827273,0.763312,0.737148,0.610816,0.553353,0.457332,0.425351,0.257784,0.19519,0.0817285,0.0487972,-0.134493,-0.19269,-0.306318,-0.335185,-0.506295,-0.551234,-0.64773,-0.668139,-0.801018,-0.825857,-0.890531,-0.899374,-0.973794,-0.974752,-0.997757,-0.993688,-0.998318,-0.975249,-0.953083,-0.936722,-0.870857,-0.827273,-0.763311,-0.737148,-0.610816,-0.553353,-0.457332,-0.425351,-0.257784,-0.19519,-0.0817284,-0.0487971,0.134493,0.19269,0.306318,0.335185,0.506295,0.551234,0.64773,0.668139,0.801018,0.825857,0.890531,0.899374,0.973794,0.974752,0.997757,0.993688,0.998318,0.975249,0.953083,0.936722,0.870857,0.827273,0.763311,0.737148,0.610816,0.553353,0.457332,0.42535,0.257784,0.195189,0.0817283,0.048797,-0.134493,-0.19269,-0.306318,-0.335185,-0.506295,-0.551234,-0.64773,-0.668139,-0.801018,-0.825857,-0.890531,-0.899374,-0.973794,-0.974752,-0.997757,-0.993688,-0.998318,-0.975249,-0.953083,-0.936722,-0.870857,-0.827273,-0.763311,-0.737148,-0.610816,-0.553353,-0.457332,-0.42535,-0.257784,-0.195189,-0.0817282,-0.0487969,0.134493,0.19269,0.306318,0.335185,0.506295,0.551234,0.64773,0.668139,0.801018,0.825857,0.890531,0.899374,0.973794,0.974752,0.997757,0.993688,0.998318,0.975249,0.953083,0.936722,0.870857,0.827273,0.763311,0.737148,0.610816,0.553353,0.457332,0.42535,0.257784,0.195189,0.0817281,0.0487969,-0.134493,-0.19269,-0.306318,-0.335185,-0.506295,-0.551234,-0.64773,-0.668139,-0.801018,-0.825857,-0.890531,-0.899374,-0.973794,-0.974752,-0.997757,-0.993688,-0.998318,-0.975249,-0.953083,-0.936722,-0.870857,-0.827273,-0.763311,-0.737148,-0.610816,-0.553353,-0.457332,-0.42535,-0.257784,-0.195189,-0.081728,-0.0487968,0.134493,0.19269,0.306318,0.335186,0.506295,0.551234,0.64773,0.668139,0.801018,0.825857,0.890531,0.899374,0.973794,0.974752,0.997757,0.993688,0.998318,0.975249,0.953083,0.936722,0.870857,0.827273,0.763311,0.737148,0.610816,0.553353,0.457332,0.42535,0.257784,0.195189,0.0817279,0.0487967,-0.134494,-0.19269,-0.306318,-0.335186,-0.506295,-0.551234,-0.64773,-0.668139,-0.801018,-0.825858,-0.890531,-0.899374,-0.973794,-0.974752,-0.997757,-0.993688,-0.998318,-0.975249,-0.953083,-0.936722,-0.870857,-0.827273,-0.763311,-0.737148,-0.610816,-0.553352,-0.457332,-0.42535,-0.257784,-0.195189,-0.0817279,-0.0487966,0.134494,0.19269,0.306318,0.335186,0.506296,0.551234,0.64773,0.668139,0.801019,0.825858,0.890531,0.899374,0.973794,0.974752,0.997757,0.993688,0.998318,0.975249,0.953083,0.936722,0.870857,0.827273,0.763311,0.737148,0.610816,0.553352,0.457332,0.42535,0.257784,0.195189,0.0817278,0.0487965,-0.134494,-0.19269,-0.306318,-0.335186,-0.506296,-0.551234,-0.647731,-0.668139,-0.801019,-0.825858,-0.890531,-0.899374,-0.973794,-0.974752,-0.997757,-0.993688,-0.998318,-0.975249,-0.953083,-0.936722,-0.870857,-0.827273,-0.763311,-0.737148,-0.610816,-0.553352,-0.457332,-0.42535,-0.257784,-0.195189,-0.0817277,-0.0487964,0.134494,0.19269,0.306319,0.335186,0.506296,0.551234,0.647731,0.668139,0.801019,0.825858,0.890531,0.899374,0.973794,0.974752,0.997757,0.993688,0.998318,0.975249,0.953083,0.936722,0.870857,0.827273,0.763311,0.737148,0.610816,0.553352,0.457332,0.42535,0.257783,0.195189,0.0817276,0.0487963,-0.134494,-0.19269,-0.306319,-0.335186,-0.506296,-0.551234,-0.647731,-0.668139,-0.801019,-0.825858,-0.890532,-0.899374,-0.973794,-0.974752,-0.997757,-0.993688,-0.998318,-0.975249,-0.953083,-0.936722,-0.870857,-0.827273,-0.763311,-0.737148,-0.610816,-0.553352,-0.457331,-0.42535,-0.257783,-0.195189,-0.0817275,-0.0487963,0.134494,0.192691,0.306319,0.335186,0.506296,0.551234,0.647731,0.668139,0.801019,0.825858,0.890532,0.899374,0.973794,0.974752,0.997757,0.993688,0.998318,0.975249,0.953083,0.936721,0.870857,0.827273,0.763311,0.737148,0.610815,0.553352,0.457331,0.42535,0.257783,0.195189,0.0817274,0.0487962,-0.134494,-0.192691,-0.306319,-0.335186,-0.506296,-0.551234,-0.647731,-0.668139,-0.801019,-0.825858,-0.890532,-0.899374,-0.973794,-0.974752,-0.997757,-0.993688,-0.998318,-0.975249,-0.953083,-0.936721,-0.870857,-0.827273,-0.763311,-0.737148,-0.610815,-0.553352,-0.457331,-0.42535,-0.257783,-0.195188,-0.0817273,-0.0487961,0.134494,0.192691,0.306319,0.335186,0.506296,0.551235,0.647731,0.668139,0.801019,0.825858,0.890532,0.899375,0.973794,0.974752,0.997757,0.993688,0.998317,0.975249,0.953083,0.936721,0.870856,0.827273,0.763311,0.737148,0.610815,0.553352,0.457331,0.42535,0.257783,0.195188,0.0817273,0.048796,-0.134494,-0.192691,-0.306319,-0.335186,-0.506296,-0.551235,-0.647731,-0.66814,-0.801019,-0.825858,-0.890532,-0.899375,-0.973794,-0.974752,-0.997757,-0.993688,-0.998317,-0.975249,-0.953083,-0.936721,-0.870856,-0.827273,-0.763311,-0.737147,-0.610815,-0.553352,-0.457331,-0.425349,-0.257783,-0.195188,-0.0817272,-0.0487959,0.134494,0.192691,0.306319,0.335186,0.506296,0.551235,0.647731,0.66814,0.801019,0.825858,0.890532,0.899375,0.973794,0.974752,0.997757,0.993688,0.998317,0.975249,0.953083,0.936721,0.870856,0.827273,0.763311,0.737147,0.610815,0.553352,0.457331,0.425349,0.257783,0.195188,0.0817271,0.0487958,-0.134494,-0.192691,-0.306319,-0.335186,-0.506296,-0.551235,-0.647731,-0.66814,-0.801019,-0.825858,-0.890532,-0.899375,-0.973794,-0.974752,-0.997757,-0.993688,-0.998317,-0.975249,-0.953083,-0.936721,-0.870856,-0.827273,-0.763311,-0.737147,-0.610815,-0.553352,-0.457331,-0.425349,-0.257783,-0.195188,-0.081727,-0.0487957,0.134494,0.192691,0.306319,0.335187,0.506296,0.551235,0.647731,0.66814,0.801019,0.825858,0.890532,0.899375,0.973794,0.974752,0.997757,0.993688,0.998317,0.975249,0.953083,0.936721,0.870856,0.827272,0.76331,0.737147,0.610815,0.553352,0.457331,0.425349,0.257783,0.195188,0.0817269,0.0487956,-0.134495,-0.192691,-0.306319,-0.335187,-0.506296,-0.551235,-0.647731,-0.66814,-0.801019,-0.825858,-0.890532,-0.899375,-0.973794,-0.974752,-0.997757,-0.993688,-0.998317,-0.975249,-0.953083,-0.936721,-0.870856,-0.827272,-0.76331,-0.737147,-0.610815,-0.553352,-0.457331,-0.425349,-0.257783,-0.195188,-0.0817268,-0.0487956,0.134495,0.192691,0.306319,0.335187,0.506296,0.551235,0.647731,0.66814,0.801019,0.825858,0.890532,0.899375,0.973794,0.974752,0.997757,0.993688,0.998317,0.975249,0.953083,0.936721,0.870856,0.827272,0.76331,0.737147,0.610815,0.553352,0.457331,0.425349,0.257783,0.195188,0.0817267,0.0487955,-0.134495,-0.192691,-0.306319,-0.335187,-0.506297,-0.551235,-0.647731,-0.66814,-0.801019,-0.825858,-0.890532,-0.899375,-0.973794,-0.974752,-0.997757,-0.993688,-0.998317,-0.975248,-0.953083,-0.936721,-0.870856,-0.827272,-0.76331,-0.737147,-0.610815,-0.553351,-0.457331,-0.425349,-0.257783,-0.195188,-0.0817266,-0.0487954,0.134495,0.192691,0.30632,0.335187,0.506297,0.551235,0.647731,0.66814,0.801019,0.825858,0.890532,0.899375,0.973794,0.974752,0.997757,0.993688,0.998317,0.975248,0.953083,0.936721,0.870856,0.827272,0.76331,0.737147,0.610815,0.553351,0.457331,0.425349,0.257782,0.195188,0.0817266,0.0487953,-0.134495,-0.192691,-0.30632,-0.335187,-0.506297,-0.551235,-0.647731,-0.66814,-0.801019,-0.825858,-0.890532,-0.899375,-0.973794,-0.974752,-0.997757,-0.993688,-0.998317,-0.975248,-0.953083,-0.936721,-0.870856,-0.827272,-0.76331,-0.737147,-0.610815,-0.553351,-0.457331,-0.425349,-0.257782,-0.195188,-0.0817264,-0.0487952,0.134495,0.192692,0.30632,0.335187,0.506297,0.551235,0.647732,0.66814,0.801019,0.825858,0.890532,0.899375,0.973794,0.974752,0.997757,0.993688,0.998317,0.975248,0.953083,0.936721,0.870856,0.827272,0.76331,0.737147,0.610815,0.553351,0.45733,0.425349,0.257782,0.195188,0.0817264,0.0487951,-0.134495,-0.192692,-0.30632,-0.335187,-0.506297,-0.551235,-0.647732,-0.66814,-0.801019,-0.825858,-0.890532,-0.899375,-0.973794,-0.974752,-0.997757,-0.993688,-0.998317,-0.975248,-0.953083,-0.936721,-0.870856,-0.827272,-0.76331,-0.737147,-0.610815,-0.553351,-0.45733,-0.425349,-0.257782,-0.195187,-0.0817263,-0.048795,0.134495,0.192692,0.30632,0.335187,0.506297,0.551235,0.647732,0.66814,0.801019,0.825858,0.890532,0.899375,0.973794,0.974752,0.997757,0.993688,0.998317,0.975248,0.953083,0.936721,0.870856,0.827272,0.76331,0.737147,0.610814,0.553351,0.45733,0.425349,0.257782,0.195187,0.0817262,0.0487949,-0.134495,-0.192692,-0.30632,-0.335187,-0.506297,-0.551235,-0.647732,-0.66814,-0.80102,-0.825858,-0.890532,-0.899375,-0.973794,-0.974752,-0.997757,-0.993688,-0.998317,-0.975248,-0.953083,-0.936721,-0.870856,-0.827272,-0.76331,-0.737147,-0.610814,-0.553351,-0.45733,-0.425349,-0.257782,-0.195187,-0.0817261,-0.0487949,0.134495,0.192692,0.30632,0.335187,0.506297,0.551235,0.647732,0.66814,0.80102,0.825859,0.890532,0.899375,0.973794,0.974752,0.997757,0.993688,0.998317,0.975248,0.953083,0.936721,0.870856,0.827272,0.76331,0.737147,0.610814,0.553351,0.45733,0.425348,0.257782,0.195187,0.081726,0.0487948,-0.134495,-0.192692,-0.30632,-0.335187,-0.506297,-0.551236,-0.647732,-0.66814,-0.80102,-0.825859,-0.890532,-0.899375,-0.973794,-0.974752,-0.997757,-0.993688,-0.998317,-0.975248,-0.953083,-0.936721,-0.870856,-0.827272,-0.76331,-0.737147,-0.610814,-0.553351,-0.45733,-0.425348,-0.257782,-0.195187,-0.0817259 }};

  ATK::InPointerFilter<double> generator(data.data(), 1, PROCESSSIZE, false);
  generator.set_output_sampling_rate(48000);
  ATK::InPointerFilter<double> generatordelay(datadelay.data(), 1, PROCESSSIZE, false);
  generatordelay.set_output_sampling_rate(48000);

  ATK::UniversalVariableDelayLineFilter<double> filter(48000);
  filter.set_blend(0);
  filter.set_feedback(0);
  filter.set_feedforward(1);
  filter.set_input_sampling_rate(48000);
  filter.set_input_port(0, &generator, 0);
  filter.set_input_port(1, &generatordelay, 0);

  std::vector<double> outdata(PROCESSSIZE);
  ATK::OutPointerFilter<double> output(outdata.data(), 1, PROCESSSIZE, false);
  output.set_input_sampling_rate(48000);
  output.set_input_port(0, &filter, 0);

  output.process(1);
  output.process(49);
  output.process(51);
  output.process(PROCESSSIZE - 1 - 49 -51);

  for(gsl::index i = 0; i < PROCESSSIZE; ++i)
  {
    ASSERT_NEAR(ref[i], outdata[i], 0.01);
  }
}

TEST(UniversalVariableDelayLineFilter, sinus_cachedgenerator_test)
{
  std::vector<double> data(PROCESSSIZE);
  for(gsl::index i = 0; i < PROCESSSIZE; ++i)
  {
    data[i] = std::sin(2 * boost::math::constants::pi<double>() * (i+1.)/48000 * 1000);
  }

  ATK::InPointerFilter<double> sinus(data.data(), 1, PROCESSSIZE, false);
  sinus.set_output_sampling_rate(48000);
  ATK::CachedSinusGeneratorFilter<double> generator(1, 1);
  generator.set_output_sampling_rate(48000);
  generator.set_volume((1e-3)*48000);
  generator.set_offset((1.5e-3)*48000);

  std::vector<double> outdata(PROCESSSIZE);

  ATK::UniversalVariableDelayLineFilter<double> filter(128);
  filter.set_input_sampling_rate(48000);
  filter.set_input_port(0, &sinus, 0);
  filter.set_input_port(1, &generator, 0);

  ATK::OutPointerFilter<double> output(outdata.data(), 1, PROCESSSIZE, false);
  output.set_input_sampling_rate(48000);
  output.set_input_port(0, &filter, 0);

  output.process(1);
  output.process(49);
  output.process(51);
  output.process(PROCESSSIZE - 1 - 49 -51);
}

TEST(UniversalVariableDelayLineFilter, sinus_central_delay_test)
{
  ATK::UniversalVariableDelayLineFilter<double> filter(128);
  filter.set_central_delay(10);
  ASSERT_EQ(filter.get_central_delay(), 10);
}

TEST(UniversalVariableDelayLineFilter, sinus_blend_test)
{
  ATK::UniversalVariableDelayLineFilter<double> filter(128);
  filter.set_blend(0.5);
  ASSERT_EQ(filter.get_blend(), 0.5);
}

TEST(UniversalVariableDelayLineFilter, sinus_feedforward_test)
{
  ATK::UniversalVariableDelayLineFilter<double> filter(128);
  filter.set_feedforward(0.5);
  ASSERT_EQ(filter.get_feedforward(), 0.5);
}

TEST(UniversalVariableDelayLineFilter, sinus_feedback_test)
{
  ATK::UniversalVariableDelayLineFilter<double> filter(128);
  filter.set_feedback(0.5);
  ASSERT_EQ(filter.get_feedback(), 0.5);
}

TEST(UniversalVariableDelayLineFilter, sinus_feedback_range_test)
{
  ATK::UniversalVariableDelayLineFilter<double> filter(128);
  ASSERT_THROW(filter.set_feedback(1), ATK::RuntimeError);
}

TEST(UniversalVariableDelayLineFilter, sinus_feedback_range2_test)
{
  ATK::UniversalVariableDelayLineFilter<double> filter(128);
  ASSERT_THROW(filter.set_feedback(-1), ATK::RuntimeError);
}
